#This file contains various SQL challenges to showcase my learning of basic to advanced SQL skills:

#SQL CHALLENGE 1: HIT MOVIES
CREATE TABLE movies (
	id INTEGER PRIMARY KEY,
	title TEXT,
	released INTEGER
);

INSERT INTO movies VALUES (1, "Tenet", 2020);
INSERT INTO movies VALUES (2, "Wonder Woman 1984", 2020);
INSERT INTO movies VALUES (3, "Soul", 2020);
INSERT INTO movies VALUES (4, "The Midnight Sky", 2020);
INSERT INTO movies VALUES (5, "Godzilla vs. Kong", 2021);
INSERT INTO movies VALUES (6, "A Quiet Place Part II", 2021);

#1. Select all movies.
SELECT *
FROM movies;
#2. Show all information for movies released from 2021 or later in order by newest to oldest.
SELECT *
FROM movies
WHERE title
ORDER BY released>=2021 DESC;

#SQL CHALLENGE 2: E-COMM DATABASE
CREATE TABLE ecom_data (
    user_id VARCHAR(50),
    session_duration INT,
    purchase_flag BIT,
    amount_spent DECIMAL(10, 2),
    item_name VARCHAR(50)
);

INSERT INTO ecom_data (user_id, session_duration, purchase_flag, amount_spent, item_name)
VALUES
    ('aBcDeF123456', 3, 1, 25.50, 'Wireless Earbuds'),
    ('gHiJkL789012', 4, 0, 0.00, NULL),
    ('mNoPqR345678', 6, 1, 75.20, 'Smartphone Case'),
    ('sTuVwX901234', 2, 0, 0.00, NULL),
    ('yZaBcD567890', 5, 1, 10.75, 'Portable Charger'),
    ('eFgHiJ123456', 4, 0, 0.00, NULL),
    ('kLmNoP789012', 1, 1, 50.00, 'Bluetooth Speaker'),
    ('qRsTuV345678', 2, 0, 0.00, NULL),
    ('wXyZaB901234', 3, 1, 20.90, 'Fitness Tracker'),
    ('zN53qR345321', 6, 1, 75.20, 'Smartphone Case'),
    ('QrSFgH561764', 1, 1, 50.00, 'Bluetooth Speaker'),
    ('cDeFgH567890', 4, 1, 150.75, 'Smartwatch');

#1. Show the SUM of all minutes users spent shopping.
SELECT SUM(session_duration)
FROM ecom_data;

#2. Show the SUM of all minutes users spent shopping for each item.
SELECT SUM(session_duration), item_name
FROM ecom_data
GROUP BY item_name;

#SQL CHALLENGE 3: BANK DATABASE
CREATE TABLE bank_products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT,
    product_type TEXT,
    interest_rate DECIMAL(5, 2),
    monthly_fee DECIMAL(6, 2),
    minimum_balance DECIMAL(10, 2)
);

INSERT INTO bank_products (product_id, product_name, product_type, interest_rate, monthly_fee, minimum_balance)
VALUES
    (1, 'Savings Account', 'Savings', 0.75, 0.00, 100.00),
    (2, 'Checking Account', 'Checking', 0.25, 5.00, 50.00),
    (3, 'Business Account', 'Business', 1.50, 10.00, 500.00),
    (4, 'Credit Card', 'Credit Card', 18.99, 0.00, 0.00),
    (5, 'Mortgage Loan', 'Loan', 3.25, 0.00, 100000.00),
    (6, 'Certificate of Deposit', 'Savings', 1.50, 0.00, 1000.00),
    (7, 'Student Checking Account', 'Checking', 0.10, 0.00, 10.00),
    (8, 'Business Credit Card', 'Credit Card', 16.99, 0.00, 0.00),
    (9, 'Home Equity Loan', 'Loan', 4.50, 0.00, 50000.00),
    (10, 'IRA Account', 'Savings', 1.25, 0.00, 500.00),
    (11, 'Personal Loan', 'Loan', 8.75, 0.00, 5000.00),
    (12, 'Money Market Account', 'Savings', 1.00, 0.00, 500.00),
    (13, 'Youth Savings Account', 'Savings', 0.50, 0.00, 10.00),
    (14, 'Rewards Credit Card', 'Credit Card', 21.99, 0.00, 0.00),
    (15, 'Auto Loan', 'Loan', 4.25, 0.00, 20000.00);

#1. Show all bank product names.
SELECT product_name
FROM bank_products;

#2. Show products names with "Checking" or "Savings" product types.
SELECT product_name
FROM bank_products
WHERE product type="Checking"
OR product_type="Savings";

#3. Show product names that have a Savings product type with an interest rate of at least 0.75 and no monthly fee.
SELECT product_name
FROM bank_products
WHERE product_type="Savings"
AND interest_rate>=0.75
AND monthly_fee=0;

#SQL CHALLENGE 4: TELECOM CUSTOMER
-- TELECOM DATA TABLE #1: products 
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT,
    product_type TEXT,
    speed_mbps INTEGER,
    data_limit_gb INTEGER,
    monthly_price DECIMAL(8, 2)
);

INSERT INTO products (product_id, product_name, product_type, speed_mbps, data_limit_gb, monthly_price)
VALUES
    (1, 'High-Speed Internet', 'Internet', 100, 500, 49.99),
    (2, 'Unlimited Data Plan', 'Cell Phone Service', NULL, NULL, 35.00),
    (3, 'Premium TV Package', 'TV Package', NULL, NULL, 79.99),
    (4, 'Fiber Optic Internet', 'Internet', 500, 1000, 79.99),
    (5, 'Family Plan', 'Cell Phone Service', NULL, NULL, 25.00);
    
    
-- TELECOM DATA TABLE #2: customer_subscriptions
CREATE TABLE customer_subscriptions (
    customer_id TEXT PRIMARY KEY,
    product_id INTEGER,
    price DECIMAL(8, 2),
    email TEXT,
    FOREIGN KEY (product_id) REFERENCES products (product_id)
);

INSERT INTO customer_subscriptions (customer_id, product_id, price, email)
VALUES
    ('123456789012', 1, 49.99, 'john.doe@example.com'),
    ('234567890123', 2, 35.00, 'jane.smith@example.com'),
    ('345678901234', 3, 79.99, 'alice.davis@example.com'),
    ('456789012345', 4, 79.99, 'bob.johnson@example.com'),
    ('567890123456', 1, 49.99, 'susan.wilson@example.com');

#1. Show all product names of the "Internet" product type.
SELECT product_name
FROM products
WHERE product_type="Internet";

#2. Show customer IDs of all customers who are subscribed to High-speed Internet.
SELECT customer_id
FROM customer_subscriptions
WHERE product_id=1;

#3. Show all email addresses of customers who are subscribed the Internet product type.
SELECT email
FROM customer_subscriptions
WHERE product_id IN(SELECT product_id FROM products WHERE product_type="Internet");

#SQL CHALLENGE 5: SALARY DATABASE
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    department TEXT,
    salary DECIMAL(10, 2),
    years_of_experience INTEGER
);

INSERT INTO employees (employee_id, department, salary, years_of_experience)
VALUES
    (1, 'Finance', 60000.00, 5),
    (2, 'Marketing', 55000.00, 3),
    (3, 'Sales', 75000.00, 8),
    (4, 'Engineering', 80000.00, 7),
    (5, 'HR', 50000.00, 2),
    (6, 'Finance', 70000.00, 6),
    (7, 'Marketing', 60000.00, 4),
    (8, 'Sales', 85000.00, 10),
    (9, 'Engineering', 90000.00, 9),
    (10, 'HR', 55000.00, 3),
    (11, 'Sales', 72000.00, 6),
    (12, 'Sales', 80000.00, 7),
    (13, 'Engineering', 85000.00, 8),
    (14, 'Engineering', 92000.00, 10);

#1. Show the departments with an annual spend on salaries of at least 300,000.
SELECT department, SUM(salary) AS total_spent
FROM employees
GROUP BY department
HAVING total_spent>=300000;

#2. Show all departments that pay an avg of at least 70,000.
SELECT department, AVG(salary) AS avg_salary
FROM employees
GROUP BY department
HAVING avg_salary>=70000;

#SQL CHALLENGE 6: COMPANY MARATHON DATABASE -- I thought of questions I wanted to know when reviewing the data and answered them using SQL.
CREATE TABLE marathon (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
   participant_name TEXT,
   previous_experience TEXT,
   completion_fraction REAL);

INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Sadie Hawkins", "yes", 1);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Brandon Flowers", "no", 0.241);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Michael Scott", "no", 0.804);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Karamo Brown", "yes", 0.9512);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Antoni Porowski", "yes", 0.640);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Rajnighanda Kapoor", "no", 1);

#1. Show all participants and the percent they completed.
SELECT participant_name, completion_fraction*100 AS completion_percent
FROM marathon;

#2. Show all participants and the percent they completed rounded to one decimal.
SELECT participant_name, ROUND(completion_fraction*100, 1) AS completion_percent
FROM marathon;

#3. Show the number of employees who completed each quarter of the marathon (>=75%, 50%, 25%, or <25%).
SELECT COUNT(*) AS quantity,
CASE WHEN completion_fraction>=.75 THEN "75%+"
WHEN completion_fraction>=.50 THEN "50%+"
WHEN completion_fraction>.25 THEN "25%+"
ELSE "Under 25%"
END AS "quarter_completed"
FROM marathon
GROUP BY "quarter_completed";

#SQL CHALLENGE 7: PHARMA DATA
-- Create the 'prescriptions' table
CREATE TABLE prescriptions (
    person_ID INTEGER,
    geo TEXT,
    doctor_name TEXT,
    date_filled DATE,
    active TEXT
);

-- Create the 'medication' table
CREATE TABLE medication (
    person_ID INTEGER,
    medication_name TEXT,
    prescription_id INTEGER
);

-- Insert data into the 'prescriptions' table
INSERT INTO prescriptions (person_ID, geo, doctor_name, date_filled, active)
VALUES
    (1, '90210', 'Dr. Smith', '2024-01-10', 'Y'),
    (2, '30301', 'Dr. Johnson', '2022-11-25', 'N'),
    (3, '10001', 'Dr. Davis', '2023-02-05', 'Y'),
    (4, '60601', 'Dr. Patel', '2022-12-15', 'Y'),
    (5, '75201', 'Dr. Garcia', '2023-01-30', 'Y'),
    (6, '90210', 'Dr. Smith', '2023-04-15', 'Y'),
    (7, '30301', 'Dr. Johnson', '2023-04-16', 'Y'),
    (8, '10001', 'Dr. Davis', '2023-04-17', 'Y'),
    (9, '60601', 'Dr. Patel', '2023-04-18', 'Y'),
    (10, '75201', 'Dr. Garcia', '2023-04-19', 'Y'),
    (11, '90210', 'Dr. Smith', '2023-04-20', 'Y'),
    (12, '30301', 'Dr. Johnson', '2023-04-21', 'Y'),
    (13, '10001', 'Dr. Davis', '2023-04-22', 'N'),
    (14, '60601', 'Dr. Patel', '2023-04-23', 'Y'),
    (15, '75201', 'Dr. Garcia', '2023-04-24', 'Y'),
    (16, '90210', 'Dr. Smith', '2023-04-25', 'N'),
    (17, '30301', 'Dr. Johnson', '2023-04-26', 'Y'),
    (18, '10001', 'Dr. Davis', '2023-04-27', 'Y'),
    (19, '60601', 'Dr. Patel', '2023-04-28', 'N'),
    (20, '75201', 'Dr. Garcia', '2023-04-29', 'Y'),
    (21, '90210', 'Dr. Smith', '2023-04-30', 'N'),
    (22, '30301', 'Dr. Johnson', '2023-05-01', 'Y'),
    (23, '10001', 'Dr. Davis', '2023-05-02', 'Y'),
    (24, '60601', 'Dr. Patel', '2024-01-24', 'Y'),
    (25, '75201', 'Dr. Garcia', '2023-05-04', 'Y');

-- Insert data into the 'medication' table
INSERT INTO medication (person_ID, medication_name, prescription_id)
VALUES
    (1, 'Teamocil', 12345678),
    (2, 'Peppy Bismilk', 23456789),
    (3, 'Xanatab', 34567890),
    (4, 'Zonkify', 45678901),
    (5, 'Floopoxetine', 56789012),
    (6, 'Teamocil', 43890775),
    (7, 'Glumara', 78901234),
    (8, 'Xanatab', 89012345),
    (9, 'Zonkify', 90123456),
    (10, 'Floopoxetine', 31346578),
    (11, 'Zonkify', 46456798),
    (12, 'Xanatab', 67567809),
    (13, 'Teamocil', 54678911),
    (14, 'Peppy Bismilk', 21789021),
    (15, 'Zonkify', 76890132),
    (16, 'Peppy Bismilk', 26901234),
    (17, 'Floopoxetine', 84212345),
    (18, 'Floopoxetine', 36323456),
    (19, 'Floopoxetine', 23345678),
    (20, 'Xanatab', 63896789),
    (21, 'Zonkify', 25237890),
    (22, 'Peppy Bismilk', 14678901),
    (23, 'Zonkify', 85789012),
    (24, 'Teamocil', 42890123),
    (25, 'Glumara', 13901234);

#1. 
